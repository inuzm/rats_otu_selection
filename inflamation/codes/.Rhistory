DeaZone[i + 1,] <- DeaZone[i,] + replace(numeric(d), id, 1)
} else if (typeOfEvent == "f") {
id <- sample(
x = 1:d, size = 1, prob = fitRates * DeaZone[i, ]
)
RepZone[i + 1,] <- RepZone[i,] + replace(numeric(d), id, 1)
DeaZone[i + 1,] <- DeaZone[i,] - replace(numeric(d), id, 1)
} else {
id <- sample(
x = 1:d, size = 1, prob = RepZone[i,]
)
id2 <- sample(
x = 1:d, size = 1, prob = pMut[id,]
)
RepZone[i + 1,] <- RepZone[i,]
DeaZone[i + 1,] <- DeaZone[i,] + replace(numeric(d), id2, 1)
}
}
return(list(times = times, DeaZone = DeaZone, RepZone = RepZone))
}
deltaCom <- 1
muCom <- 2
lambdaCom <- 2
test1 <- immuno_reproduction(
1e4, ini1 = c(0, 0, 0), ini2 = c(100, 0, 0),
delta = deltaCom, mu = muCom, lambda = lambdaCom,
pMut = matrix(
data = c(
0.7, 0.2, 0.1,
0.3, 0.6, 0.1,
0.1, 0.1, 0.8
),
nrow = 3, byrow = TRUE
)
)
test1Results <- tibble(times = test1$times) %>%
add_column(as_tibble(
matrix(test1$DeaZone, ncol = 3,
dimnames = list(NULL, paste0("0_", 1:3)))
)) %>%
add_column(as_tibble(
matrix(test1$RepZone, ncol = 3,
dimnames = list(NULL, paste0("1_", 1:3)))
))
totPop <- rowSums(test1Results[,-1])
test1Results <- test1Results %>%
mutate(
`Trap 1` = `0_1` / totPop,
`Trap 2` = `0_2` / totPop,
`Trap 3` = `0_3` / totPop,
`Reproductive 1` = `1_1` / totPop,
`Reproductive 2` = `1_2` / totPop,
`Reproductive 3` = `1_3` / totPop
)
test2 <- immuno_reproduction(
1e4, ini1 = unlist(test1Results[10001,5:7]),
ini2 = unlist(test1Results[10001,2:4]),
delta = deltaCom, mu = muCom, lambda = lambdaCom,
pMut = matrix(
data = c(
0.7, 0.2, 0.1,
0.3, 0.6, 0.1,
0.1, 0.1, 0.8
),
nrow = 3, byrow = TRUE
)
)
test2Results <- tibble(times = test2$times) %>%
add_column(as_tibble(
matrix(test2$DeaZone, ncol = 3,
dimnames = list(NULL, paste0("0_", 1:3)))
)) %>%
add_column(as_tibble(
matrix(test2$RepZone, ncol = 3,
dimnames = list(NULL, paste0("1_", 1:3)))
))
totPop <- rowSums(test2Results[,-1])
test2Results <- test2Results %>%
mutate(
`Trap 1` = `0_1` / totPop,
`Trap 2` = `0_2` / totPop,
`Trap 3` = `0_3` / totPop,
`Reproductive 1` = `1_1` / totPop,
`Reproductive 2` = `1_2` / totPop,
`Reproductive 3` = `1_3` / totPop
)
plllllllllll1 <- test1Results %>%
pivot_longer(!times, names_to = "type", values_to = "freq") %>%
filter(grepl('p', type)) %>%
group_by(times, type) %>%
summarise(freq = sum(freq)) %>%
ggplot(aes(x = times, y = freq, group = type, fill = type)) +
geom_area(position = "fill") +
theme_wsj() +
scale_fill_wsj(guide = guide_legend(title = "Particle type"))
ggsave(
filename = "~/Documents/notas_cimat/doctorado/SJE/figs/immuno31.png",
plot = plllllllllll1,
width = 1600,
height = 900,
units = 'px',
scale = 2.5
)
plllllllllll2 <- test2Results %>%
pivot_longer(!times, names_to = "type", values_to = "freq") %>%
filter(grepl('p', type)) %>%
group_by(times, type) %>%
summarise(freq = sum(freq)) %>%
ggplot(aes(x = times, y = freq, group = type, fill = type)) +
geom_area(position = "fill") +
theme_wsj() +
scale_fill_wsj(guide = guide_legend(title = "Particle type"))
ggsave(
filename = "~/Documents/notas_cimat/doctorado/SJE/figs/immuno32.png",
plot = plllllllllll2,
width = 1600,
height = 900,
units = 'px',
scale = 2.5
)
pacman::p_load(tibble, dplyr, tidyr, ggplot2, ggstream, ggthemes)
immuno_reproduction <- function(nSims, ini1, ini2,
lambda = 1, mu = 1, delta = 1,
fit = function(i){i}, pMut) {
times <- rep(0, nSims + 1)
d <- length(ini1)
RepZone <- matrix(ncol = d, nrow = nSims + 1)
DeaZone <- matrix(ncol = d, nrow = nSims + 1)
RepZone[1, ] <- ini1
DeaZone[1, ] <- ini2
fitRates <- fit(1:d)
for (i in 1:nSims) {
dRate <- delta * sum(DeaZone[i,])
tRate <- lambda * sum(RepZone[i,])
fRate <- sum(fitRates * DeaZone[i, ])
rRate <- mu * sum(RepZone[i,])
totRate <- dRate + tRate + fRate + rRate
if (totRate == 0) {
times <- times[1:(i-1)]
DeaZone <- DeaZone[1:(i-1),]
RepZone <- RepZone[1:(i-1),]
break
}
eventTime <- rexp(n = 1, rate = dRate + tRate + fRate + rRate)
times[i + 1] <- times[i] + eventTime
typeOfEvent <- sample(
x = c("d", "t", "f", "r"),
size = 1,
prob = c(dRate, tRate, fRate, rRate)
)
if (typeOfEvent == "d") {
id <- sample(
x = 1:d, size = 1, prob = DeaZone[i, ]
)
RepZone[i + 1,] <- RepZone[i,]
DeaZone[i + 1,] <- DeaZone[i,] - replace(numeric(d), id, 1)
} else if (typeOfEvent == "t") {
id <- sample(
x = 1:d, size = 1, prob = RepZone[i, ]
)
RepZone[i + 1,] <- RepZone[i,] - replace(numeric(d), id, 1)
DeaZone[i + 1,] <- DeaZone[i,] + replace(numeric(d), id, 1)
} else if (typeOfEvent == "f") {
id <- sample(
x = 1:d, size = 1, prob = fitRates * DeaZone[i, ]
)
RepZone[i + 1,] <- RepZone[i,] + replace(numeric(d), id, 1)
DeaZone[i + 1,] <- DeaZone[i,] - replace(numeric(d), id, 1)
} else {
id <- sample(
x = 1:d, size = 1, prob = RepZone[i,]
)
id2 <- sample(
x = 1:d, size = 1, prob = pMut[id,]
)
RepZone[i + 1,] <- RepZone[i,]
DeaZone[i + 1,] <- DeaZone[i,] + replace(numeric(d), id2, 1)
}
}
return(list(times = times, DeaZone = DeaZone, RepZone = RepZone))
}
deltaCom <- 1
muCom <- 2
lambdaCom <- 2
test1 <- immuno_reproduction(
1e4, ini1 = c(0, 0, 0), ini2 = c(0, 0, 100),
delta = deltaCom, mu = muCom, lambda = lambdaCom,
pMut = matrix(
data = c(
0.7, 0.2, 0.1,
0.3, 0.6, 0.1,
0.1, 0.1, 0.8
),
nrow = 3, byrow = TRUE
)
)
test1Results <- tibble(times = test1$times) %>%
add_column(as_tibble(
matrix(test1$DeaZone, ncol = 3,
dimnames = list(NULL, paste0("0_", 1:3)))
)) %>%
add_column(as_tibble(
matrix(test1$RepZone, ncol = 3,
dimnames = list(NULL, paste0("1_", 1:3)))
))
totPop <- rowSums(test1Results[,-1])
test1Results <- test1Results %>%
mutate(
`Trap 1` = `0_1` / totPop,
`Trap 2` = `0_2` / totPop,
`Trap 3` = `0_3` / totPop,
`Reproductive 1` = `1_1` / totPop,
`Reproductive 2` = `1_2` / totPop,
`Reproductive 3` = `1_3` / totPop
)
test2 <- immuno_reproduction(
1e4, ini1 = unlist(test1Results[10001,5:7]),
ini2 = unlist(test1Results[10001,2:4]),
delta = deltaCom, mu = muCom, lambda = lambdaCom,
pMut = matrix(
data = c(
0.7, 0.2, 0.1,
0.3, 0.6, 0.1,
0.1, 0.1, 0.8
),
nrow = 3, byrow = TRUE
)
)
test2Results <- tibble(times = test2$times) %>%
add_column(as_tibble(
matrix(test2$DeaZone, ncol = 3,
dimnames = list(NULL, paste0("0_", 1:3)))
)) %>%
add_column(as_tibble(
matrix(test2$RepZone, ncol = 3,
dimnames = list(NULL, paste0("1_", 1:3)))
))
totPop <- rowSums(test2Results[,-1])
test2Results <- test2Results %>%
mutate(
`Trap 1` = `0_1` / totPop,
`Trap 2` = `0_2` / totPop,
`Trap 3` = `0_3` / totPop,
`Reproductive 1` = `1_1` / totPop,
`Reproductive 2` = `1_2` / totPop,
`Reproductive 3` = `1_3` / totPop
)
plllllllllll1 <- test1Results %>%
pivot_longer(!times, names_to = "type", values_to = "freq") %>%
filter(grepl('p', type)) %>%
group_by(times, type) %>%
summarise(freq = sum(freq)) %>%
ggplot(aes(x = times, y = freq, group = type, fill = type)) +
geom_area(position = "fill") +
theme_wsj() +
scale_fill_wsj(guide = guide_legend(title = "Particle type"))
ggsave(
filename = "~/Documents/notas_cimat/doctorado/SJE/figs/immuno41.png",
plot = plllllllllll1,
width = 1600,
height = 900,
units = 'px',
scale = 2.5
)
plllllllllll2 <- test2Results %>%
pivot_longer(!times, names_to = "type", values_to = "freq") %>%
filter(grepl('p', type)) %>%
group_by(times, type) %>%
summarise(freq = sum(freq)) %>%
ggplot(aes(x = times, y = freq, group = type, fill = type)) +
geom_area(position = "fill") +
theme_wsj() +
scale_fill_wsj(guide = guide_legend(title = "Particle type"))
ggsave(
filename = "~/Documents/notas_cimat/doctorado/SJE/figs/immuno42.png",
plot = plllllllllll2,
width = 1600,
height = 900,
units = 'px',
scale = 2.5
)
install.packages("fitdistrplur")
install.packages("fitdistrplsr")
install.packages("fitdistrplus")
pacman::p_load(fitdistrplus, dplyr, ggplot2)
set.seed(6486)
n=1000
alfa_real <- 5
beta_real <- 1
# Generar muestras de una distribución gamma
muestra_gamma <- rgamma(n, shape = alfa_real, rate = beta_real)
# Histograma de las muestras de la distribución gamma
hist(muestra_gamma, main = "Distribución Gamma", col = "lightblue",
xlab = "Valores", ylab = "Frecuencia")
# Ajusta una distribución normal a los datos de la distribución gamma
modelo <- fitdist(muestra_gamma, distr  = "gamma", method = "mle")
# Parámetros estimados de la distribución normal
alfa <- modelo$estimate[1]
beta <- modelo$estimate[2]
modelo$estimate
# Ajusta una distribución normal a los datos de la distribución gamma
modelo <- fitdist(muestra_gamma, distr  = "norm", method = "mle")
# Parámetros estimados de la distribución normal
mu <- modelo$estimate[1]
sigma <- modelo$estimate[2]
modelo$estimate
x = rep(muestra_gamma, times=)
distribucion = rep(c("Gamma","Normal"), each = n)
df=data.frame(x, distribucion)
df_plots=df %>%
group_by(distribucion) %>%
arrange(x) %>%
mutate(
densidad=case_when(
distribucion == "Normal" ~ dnorm(x, mean=mu, sd=sigma),
distribucion == "Gamma" ~ dgamma(x, shape=alfa, rate=beta)
),
u=case_when(
distribucion == "Normal" ~ pnorm(x, mean=mu, sd=sigma),
distribucion == "Gamma" ~ pgamma(x, shape=alfa, rate=beta)
),
fde=row_number()/(n()+1),
cuantiles_teoricos=case_when(
distribucion == "Normal" ~ qnorm(fde, mean=mu, sd=sigma),
distribucion == "Gamma" ~ qgamma(fde, shape=alfa, rate=beta)
)
)
df_plots %>%
ggplot()+
aes(x=x, y=densidad, col=distribucion)+
geom_line()+
ggtitle("Densidades")
df_plots %>%
ggplot()+
aes(x=fde, y=u)+
geom_point(size = 2, color = "blue") + # Tamaño y color de los puntos
geom_abline(slope = 1, intercept = 0, linetype = "dashed") + # Línea de referencia
labs(x = " Teóricos", y = "Empíricos", title = "Gráficas de probabilidad") + # Tema+
facet_grid(~distribucion)
df_plots %>%
ggplot() +
aes(x=cuantiles_teoricos, y=x)+
geom_point(size = 2, color = "blue") + # Tamaño y color de los puntos
geom_abline(slope = 1, intercept = 0, linetype = "dashed") + # Línea de referencia
labs(x = " Teóricos", y = "Empíricos", title = "Gráficas de cuantiles") + # Tema+
facet_grid(~distribucion)
set.seed(7642)
n <- 1000
alfa_real <- 100
beta_real <- 1
# Generar muestras de una distribución gamma
muestra_gamma <- rgamma(n, shape = alfa_real, rate = beta_real)
# Histograma de las muestras de la distribución gamma
hist(muestra_gamma, main = "Distribución Gamma", col = "lightblue",
xlab = "Valores", ylab = "Frecuencia")
# Ajusta una distribución normal a los datos de la distribución gamma
modelo <- fitdist(muestra_gamma, distr  = "gamma", method = "mle")
# Parámetros estimados de la distribución normal
alfa <- modelo$estimate[1]
beta <- modelo$estimate[2]
modelo$estimate
modelo
summary(modelo)
# Ajusta una distribución normal a los datos de la distribución gamma
modelo <- fitdist(muestra_gamma, distr  = "norm", method = "mle")
# Parámetros estimados de la distribución normal
mu <- modelo$estimate[1]
sigma <- modelo$estimate[2]
modelo$estimate
summary(modelo)
x = rep(muestra_gamma, times=)
distribucion = rep(c("Gamma","Normal"), each = n)
df=data.frame(x, distribucion)
df_plots=df %>%
group_by(distribucion) %>%
arrange(x) %>%
mutate(
densidad=case_when(
distribucion == "Normal" ~ dnorm(x, mean=mu, sd=sigma),
distribucion == "Gamma" ~ dgamma(x, shape=alfa, rate=beta)
),
u=case_when(
distribucion == "Normal" ~ pnorm(x, mean=mu, sd=sigma),
distribucion == "Gamma" ~ pgamma(x, shape=alfa, rate=beta)
),
fde=row_number()/(n()+1),
cuantiles_teoricos=case_when(
distribucion == "Normal" ~ qnorm(fde, mean=mu, sd=sigma),
distribucion == "Gamma" ~ qgamma(fde, shape=alfa, rate=beta)
)
)
df_plots %>%
ggplot()+
aes(x=x, y=densidad, col=distribucion)+
geom_line()+
ggtitle("Densidades")
df_plots %>%
ggplot()+
aes(x=fde, y=u)+
geom_point(size = 2, color = "blue") + # Tamaño y color de los puntos
geom_abline(slope = 1, intercept = 0, linetype = "dashed") + # Línea de referencia
labs(x = " Teóricos", y = "Empíricos", title = "Gráficas de probabilidad") + # Tema+
facet_grid(~distribucion)
df_plots %>%
ggplot() +
aes(x=cuantiles_teoricos, y=x)+
geom_point(size = 2, color = "blue") + # Tamaño y color de los puntos
geom_abline(slope = 1, intercept = 0, linetype = "dashed") + # Línea de referencia
labs(x = " Teóricos", y = "Empíricos", title = "Gráficas de cuantiles") + # Tema+
facet_grid(~distribucion)
algo <- read.csv(url("https://raw.githubusercontent.com/Jonnyzamudio7/TBI/main/Data/order_df_percentages.csv"))
View(algo)
length(unique(algo$OTU))
algo <- read.csv(url("https://raw.githubusercontent.com/Jonnyzamudio7/TBI/main/Data/genus_df_percentages.csv"))
View(algo)
length(unique(algo$OTU))
length(unique(algo$Sample))
pacman::p_load(dplyr, tidyr)
algo %>% filter(Sample %in% c('S00PP-0027', 'S00PP-0022'))
algo %>% filter(Sample %in% c('S00PP-0027', 'S00PP-0022')) %>% View()
library(phyloseq)
merged_metagenomes <- import_biom("~/GIT/TBI/new_otu_table.biom")
merged_metagenomes <- import_biom(url("https://raw.githubusercontent.com/Jonnyzamudio7/TBI/main/Data/new_otu_table.biom"))
path_to_biom <- url("https://raw.githubusercontent.com/Jonnyzamudio7/TBI/main/Data/new_otu_table.biom")
path_to_biom
merged_metagenomes <- import_biom("https://raw.githubusercontent.com/Jonnyzamudio7/TBI/main/Data/new_otu_table.biom")
merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4)
merged_metagenomes
colnames(merged_metagenomes@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
counts_phylum <- tax_glom(count, taxrank = 'Phylum')
counts_phylum <- tax_glom(merged_metagenomes, taxrank = 'Phylum')
counts_phylum
phylum_df_counts <- psmelt(counts_phylum)
phylum_df_counts
phylum_df_counts %>%
filter(OTU == "1b039cbaab99f38bec0461ac24d07eec")
unique(phylum_df_counts$Sample)
counts_genus <- tax_glom(merged_metagenomes, taxrank = 'Genus')
genus_df_counts <- psmelt(counts_genus)
genus_df_counts %>%
filter(OTU == "1b039cbaab99f38bec0461ac24d07eec")
metadata_rats <- readxl::read_xlsx("https://raw.githubusercontent.com/Jonnyzamudio7/TBI/blob/main/Data/variables_desenlace.xlsx")
metadata_rats <- readxl::read_xlsx(url("https://raw.githubusercontent.com/Jonnyzamudio7/TBI/blob/main/Data/variables_desenlace.xlsx"))
metadata_rats <- readxl::read_xlsx("https://github.com/Jonnyzamudio7/TBI/raw/main/Data/variables_desenlace.xlsx")
?readRDS
?readr
?>readr
??readr
?fread
??fread
metadata_rats <- data.table::fread("https://github.com/Jonnyzamudio7/TBI/raw/main/Data/variables_desenlace.xlsx")
metadata_rats <- readxl::read_excel("https://github.com/Jonnyzamudio7/TBI/raw/main/Data/variables_desenlace.xlsx")
metadata_rats <- readxl::read_excel("~/Downloads/variables_desenlace.xlsx")
metadata_rats
View(metadata_rats)
setwd("~/Documents/camda23/rats/codes/")
#!/usr/bin/env Rscript
#install.packages("optparse", repos = "http://cran.us.r-project.org", lib = "./libs")
#install.packages("pacman", repos = "http://cran.us.r-project.org", lib = "./libs")
#library("optparse", lib.loc = "./libs")
#library("pacman", lib.loc = "./libs")
pacman::p_load(optparse)
option_list = list(
make_option(c("-o", "--original"), type = "character", default = TRUE,
help = "input directory [default= %default]", metavar = "character"),
make_option(c("-O", "--out_dir"), type = "character", default = "../results/majorityOTUs/",
help = "output directory [default= %default]", metavar = "character"),
make_option(c("-m", "--model"), type = "character", default = "nb",
help = "adjusted model: Poisson (p), Negative Binomial (nb), Zero Inflated Poisson (zip) or Zero Inflated Negative Binomial (zinb), best [default= %default]",
metavar = "integer"),
make_option(c("-p", "--perc"), type = "numeric", default = 100,
help = "percentage of samples where OTU is located",
metavar = "numeric")
);
opt_parser = OptionParser(option_list = option_list);
opt = parse_args(opt_parser);
#-------------------------------------------------------------------------------
# Load libraries via pacman
pacman::p_load(ggplot2, ggthemes,                       # Plots
dplyr, tibble, tidyr, purrr, broom, pscl)                 # Data frame manipulation
#-------------------------------------------------------------------------------
OTUs_majority_samples <- function(perc, pre_path) {
tlevels <- c(
"genus", "order", "phylum"
)
for (i in 1:length(tlevels)) {
db1 <- read.csv(paste0(pre_path, tlevels[i], "_df_absolute.csv")) %>%
mutate(OTU = paste0(OTU, "_", tlevels[i])) %>%
dplyr::rename(ID = OTU)
if (i == 1) {
db_all <- db1 %>%
filter(!is.character(ID))
}
majorityOTUs <- db1 %>%
group_by(ID) %>%
summarise(perc_app = mean(Abundance > 0)) %>%
filter(perc_app >= perc / 100)
db1_selected <- db1 %>%
filter(ID %in% unlist(majorityOTUs$ID))
db_all <- db_all %>%
full_join(db1_selected)
}
orderAux <- db_all %>%
group_by(ID) %>%
summarise(totAb = sum(Abundance)) %>%
arrange(desc(totAb))
db_all <- db_all %>%
arrange(factor(ID, levels = unlist(orderAux$ID)))
return( db_all )
}
uwu <- OTUs_majority_samples(pre_path = 'https://github.com/Jonnyzamudio7/TBI/raw/main/Data/', perc = 95)
uwu %>% View()
